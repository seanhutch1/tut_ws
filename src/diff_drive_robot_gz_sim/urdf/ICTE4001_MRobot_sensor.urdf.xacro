<?xml version="1.0" ?>
<robot name="ICTE4001Bot" xmlns:xacro="http://ros.org/wiki/xacro">
    
    <!-- ****************** ROBOT CONSTANTS *******************************  -->
    
    <!-- Define the size of the robot's main chassis in meters -->
    <xacro:property name="base_width" value="0.39"/>
    <xacro:property name="base_length" value="0.70"/>
    <xacro:property name="base_height" value="0.20"/>

    <!-- Define the shape of the robot's two back wheels in meters -->
    <xacro:property name="wheel_radius" value="0.14"/>
    <xacro:property name="wheel_width" value="0.06"/>
    <!-- Define the gap between the wheel and chassis along y-axis in meters -->
    <xacro:property name="wheel_ygap" value="0.035"/>
    <!-- Position the wheels along the z-axis -->
    <xacro:property name="wheel_zoff" value="0.05"/>
    <!-- Position the wheels along the x-axis -->
    <xacro:property name="wheel_xoff" value="0.221"/>

    <!-- Position the caster wheel along the x-axis -->
    <xacro:property name="caster_xoff" value="0.217"/>

    <!-- Define the shape of the robot's lidar in meters -->
	<xacro:property name="lidar_radius" value="0.05"/>
	<xacro:property name="lidar_height" value="0.05"/>
	<!-- Position the lidar along the z-axis -->
	<xacro:property name="lidar_zoff" value="0.125"/>
	<xacro:property name="lidar_xoff" value="0.221"/>

    <!-- ****************** INERTIAL PROPERTY MACROS ************************  -->
    
    <!-- Define box intertial property macros  -->
    <xacro:macro name="box_inertia" params="m w h d">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(m/12) * (h*h + w*w)}" ixy="0.0" ixz="0.0" iyy="${(m/12) * (h*h + d*d)}" iyz="0.0" izz="${(m/12) * (w*w + d*d)}"/>
        </inertial>
    </xacro:macro>
    <!-- Define cylinder property macros  -->
    <xacro:macro name="cylinder_inertia" params="m r h roll pitch yaw">
		<inertial>
			<origin xyz="0 0 0" rpy="${roll} ${pitch} ${yaw}" />
			<mass value="${m}"/>
			<inertia ixx="${(m/12) * (3*r*r + h*h)}" ixy = "0" ixz = "0" iyy="${(m/12) * (3*r*r + h*h)}" iyz = "0" izz="${(m/2) * (r*r)}"/>
		</inertial>
	</xacro:macro>
    <!-- Define sphere property macros  -->
    <xacro:macro name="sphere_inertia" params="m r">
        <inertial>
            <mass value="${m}"/>
            <inertia ixx="${(2/5) * m * (r*r)}" ixy="0.0" ixz="0.0" iyy="${(2/5) * m * (r*r)}" iyz="0.0" izz="${(2/5) * m * (r*r)}"/>
        </inertial>
    </xacro:macro>

    <!-- ****************** ROBOT BASE FOOTPRINT ***************************  -->
     <!-- Define the center of the main robot chassis projected on the ground -->
    <link name="base_footprint">
    </link>    
    <!-- ****************** BASE LINK DEFINITIONS ************************  -->
    <link name="base_link">
        <visual>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
            <material name="Red">
                <color rgba="1.0 0.0 0.0 1.0"/>
            </material>
        </visual>
        <collision>
            <geometry>
                <box size="${base_length} ${base_width} ${base_height}"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="15.0" w="${base_width}" d="${base_length}" h="${base_height}"/>
    </link>

    <joint name="base_joint" type="fixed">
        <parent link="base_footprint"/>
        <child link="base_link"/>
        <origin xyz="0.0 0.0 ${(wheel_radius+wheel_zoff)}" rpy="0 0 0"/>
    </joint>


    <!-- *********************** DRIVE WHEELS ******************************  -->

    <!-- Drive Wheel Macro to Define Two Wheels -->
    <xacro:macro name="wheel" params="prefix x_reflect y_reflect">
        <link name="${prefix}_link">
            <visual>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/>
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
                <material name="Gray">
                    <color rgba="0.5 0.5 0.5 1.0"/>
                </material>
            </visual>

            <collision>
                <origin xyz="0 0 0" rpy="${pi/2} 0 0"/> 
                <geometry>
                    <cylinder radius="${wheel_radius}" length="${wheel_width}"/>
                </geometry>
            </collision>
            <xacro:cylinder_inertia m="0.5" r="${wheel_radius}" h="${wheel_width}" roll = "${pi/2}" pitch = "0.0" yaw = "0.0"/>	
        </link>
        <!-- Connect the wheels to the base_link at the appropriate location, and 
        define a continuous joint to allow the wheels to freely rotate about
        an axis -->
        <joint name="${prefix}_joint" type="continuous">
			<parent link="base_link"/>
			<child link="${prefix}_link"/>
			<origin xyz="${x_reflect*wheel_xoff} ${y_reflect*(base_width/2+wheel_ygap)} ${-wheel_zoff}" rpy="0 0 0"/>
			<axis xyz="0 1 0"/>
		</joint>

        <gazebo reference="{prefix}_link">
            <mu1>1.0</mu1>
            <mu2>1.0</mu2>
            <kp>1000000.0</kp>
            <kd>100.0</kd>
            <minDepth>0.0001</minDepth>
            <maxVel>1.0</maxVel>
		</gazebo>

        <ros2_control name="${prefix}_link_controller" type="system">
            <hardware>
                <plugin>ign_ros2_control/IgnitionSystem</plugin>
            </hardware>
            <joint name="${prefix}_joint">
                <state_interface name="velocity" />
                <state_interface name="position" />
                <command_interface name="velocity" />
            </joint>
        </ros2_control>

    </xacro:macro>

    <!-- Instantiate two wheels using the macro we just made through the 
		   xacro:wheel tags. We also define the parameters to have one wheel
		   on both sides at the back of our robot (i.e. x_reflect=-1). -->

    <xacro:wheel prefix="drivewhl_l" x_reflect="-1" y_reflect="1" />
    <xacro:wheel prefix="drivewhl_r" x_reflect="-1" y_reflect="-1" />

    <!-- *********************** CASTER WHEEL ******************************  -->
    <link name="front_caster">
		<visual>
			<geometry>
				<sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
			</geometry>
			<material name="Cyan">
				<color rgba="0 1.0 1.0 1.0"/>
			</material>
		</visual>

		<collision>
			<origin xyz="0 0 0" rpy="0 0 0"/>
			<geometry>
				<sphere radius="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
			</geometry>
		</collision>

		<xacro:sphere_inertia m="0.5" r="${(wheel_radius+wheel_zoff-(base_height/2))}"/>
    </link>	

    <gazebo reference="front_caster">
		<mu1>0.01</mu1>
		<mu2>0.01</mu2>
	</gazebo>

    <joint name="caster_joint" type="fixed">
		<parent link="base_link"/>
		<child link="front_caster"/>
		<origin xyz="${caster_xoff} 0.0 ${-(base_height/2)}" rpy="0 0 0"/>
	</joint>


    <!-- *********************** 2D LIDAR ******************************  -->
    <link name="lidar_link">
		<visual>
			<geometry>
				<cylinder radius="${lidar_radius}" length="${lidar_height}"/>
			</geometry>
			<material name="Blue">
					<color rgba="0.0 0.0 1.0 0.8"/>
			</material>
		</visual>
		<collision>
			<geometry>
				<cylinder radius="${lidar_radius}" length="${lidar_height}"/>
			</geometry>
		</collision>
		<xacro:cylinder_inertia m="0.05" r="${lidar_radius}" h="${lidar_height}" roll = "0.0" pitch = "0.0" yaw = "0.0"/>	
	</link>

    <joint name="lidar_joint" type="fixed">
		<parent link="base_link"/>
		<child link="lidar_link"/>
		<origin xyz="${lidar_xoff} 0.0 ${lidar_zoff}" rpy="0 0 0"/>
	</joint>

    <gazebo reference="lidar_joint">
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>
    

    <gazebo reference="lidar_link">
        <sensor name="lidar_sensor" type="gpu_lidar">
            <!-- <pose relative_to='lidar_link'>0 0 0 0 0 0</pose> -->
            <update_rate>62.0</update_rate>
            <visualize>true</visualize>
            <always_on>1</always_on>
            <ray>
                <scan>
                    <horizontal>
                            <samples>640</samples>
                            <resolution>1.0</resolution>
                            <min_angle>${-pi}</min_angle>
                            <max_angle>${pi - 2*pi/640}</max_angle>
                    </horizontal>
                    <vertical>
                            <samples>1</samples>
                            <resolution>0.01</resolution>
                            <min_angle>0</min_angle>
                            <max_angle>0</max_angle>
                    </vertical>
                </scan>
                <range>
                        <min>0.164</min>
                        <max>12.0</max>
                        <resolution>0.01</resolution>
                </range>
                <noise>
                    <type>gaussian</type>
                    <mean>0.0</mean>
                    <stddev>0.01</stddev>
                </noise>
            </ray>
            <ignition_frame_id>lidar_link</ignition_frame_id>
        </sensor>
    </gazebo>

    <!-- *********************** IMU ******************************  -->
    <link name="imu_link">
        <visual>
            <geometry>
                <box size="0.005 0.005 0.005"/>
            </geometry>
        </visual>
        <collision>
            <geometry>
                <box size="0.005 0.005 0.005"/>
            </geometry>
        </collision>
        <xacro:box_inertia m="0.005" w="0.005" d="0.005" h="0.005"/>
    </link>

    <joint name="imu_joint" type="fixed">
        <parent link="base_link"/>
        <child link="imu_link"/>
        <origin xyz="0 0 0"/>
    </joint>

    <gazebo reference="imu_joint">
        <preserveFixedJoint>true</preserveFixedJoint>
    </gazebo>

    <gazebo reference="imu_link">
        <sensor name="imu_sensor" type="imu">
            <always_on>1</always_on>
            <update_rate>100</update_rate>
            <visualize>true</visualize>
            <imu>
                <angular_velocity>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>2e-4</stddev>
                            <bias_mean>0.0000075</bias_mean>
                            <bias_stddev>0.0000008</bias_stddev>
                        </noise>
                    </z>
                </angular_velocity>
                <linear_acceleration>
                    <x>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </x>
                    <y>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </y>
                    <z>
                        <noise type="gaussian">
                            <mean>0.0</mean>
                            <stddev>1.7e-2</stddev>
                            <bias_mean>0.1</bias_mean>
                            <bias_stddev>0.001</bias_stddev>
                        </noise>
                    </z>
                </linear_acceleration>
            </imu>
            <ignition_frame_id>imu_link</ignition_frame_id>
        </sensor>
    </gazebo>


    <!-- *********************** PLUGINS ******************************  -->
    <gazebo>
        <plugin filename="ign_ros2_control-system" name="ign_ros2_control::IgnitionROS2ControlPlugin">
            <parameters>$(find diff_drive_robot_gz_sim)/config/mobile_base_control.yaml</parameters>
            <ros>
                    <remapping>/diffdrive_controller/cmd_vel_unstamped:=/cmd_vel</remapping>
            </ros>
        </plugin>

        <plugin filename="libignition-gazebo-sensors-system.so" name="ignition::gazebo::systems::Sensors">
            <render_engine>ogre2</render_engine>
        </plugin>

        <plugin filename="libignition-gazebo-imu-system.so" name="ignition::gazebo::systems::Imu">
        </plugin>
    </gazebo>

</robot>