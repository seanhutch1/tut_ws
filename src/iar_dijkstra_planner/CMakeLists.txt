cmake_minimum_required(VERSION 3.8)
project(iar_dijkstra_planner)

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(ament_cmake_ros REQUIRED)
find_package(rclcpp REQUIRED)
find_package(rclcpp_action REQUIRED)
find_package(rclcpp_lifecycle REQUIRED)
find_package(nav2_common REQUIRED)
find_package(std_msgs REQUIRED)
find_package(visualization_msgs REQUIRED)
find_package(nav2_util REQUIRED)
find_package(nav2_core REQUIRED)
find_package(nav2_msgs REQUIRED)
find_package(nav_msgs REQUIRED)
find_package(geometry_msgs REQUIRED)
find_package(builtin_interfaces REQUIRED)
find_package(tf2_ros REQUIRED)
find_package(nav2_costmap_2d REQUIRED)
find_package(pluginlib REQUIRED)

pluginlib_export_plugin_description_file(nav2_core iar_dijkstra_planner.xml)


add_library(iar_dijkstra_planner src/iar_dijkstra_planner.cpp src/navfn.cpp)
target_compile_features(iar_dijkstra_planner PUBLIC c_std_99 cxx_std_17)  # Require C99 and C++17
target_include_directories(iar_dijkstra_planner PUBLIC
  $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}/include>
  $<INSTALL_INTERFACE:include>)
ament_target_dependencies(
  iar_dijkstra_planner
  "rclcpp"
  "rclcpp_action"
  "rclcpp_lifecycle"
  "nav2_common"
  "std_msgs"
  "visualization_msgs"
  "nav2_util"
  "nav2_core"
  "nav2_msgs"
  "nav_msgs"
  "geometry_msgs"
  "builtin_interfaces"
  "tf2_ros"
  "nav2_costmap_2d"
  "pluginlib"
)

# Causes the visibility macros to use dllexport rather than dllimport,
# which is appropriate when building the dll but not consuming it.
target_compile_definitions(iar_dijkstra_planner PRIVATE "IAR_DIJKSTRA_PLANNER_BUILDING_LIBRARY")

install(
  DIRECTORY include/
  DESTINATION include
)
install(
  TARGETS iar_dijkstra_planner
  EXPORT export_${PROJECT_NAME}
  ARCHIVE DESTINATION lib
  LIBRARY DESTINATION lib
  RUNTIME DESTINATION bin
)

install(DIRECTORY
  launch
  config
  DESTINATION share/${PROJECT_NAME}/
)

if(BUILD_TESTING)
  find_package(ament_lint_auto REQUIRED)
  # the following line skips the linter which checks for copyrights
  # comment the line when a copyright and license is added to all source files
  set(ament_cmake_copyright_FOUND TRUE)
  # the following line skips cpplint (only works in a git repo)
  # comment the line when this package is in a git repo and when
  # a copyright and license is added to all source files
  set(ament_cmake_cpplint_FOUND TRUE)
  ament_lint_auto_find_test_dependencies()
endif()

ament_export_include_directories(
  include
)
ament_export_libraries(
  iar_dijkstra_planner
)
ament_export_targets(
  export_${PROJECT_NAME}
)

ament_package()
